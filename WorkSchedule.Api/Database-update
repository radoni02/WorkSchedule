# See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.

# This stage is used when running from VS in fast mode (Default for Debug configuration)
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
USER app
WORKDIR /app
EXPOSE 8080

# This stage is used to build the service project
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
ARG BUILD_CONFIGURATION=Development
WORKDIR /src
COPY ["WorkSchedule.Api/WorkSchedule.Api.csproj", "WorkSchedule.Api/"]
COPY ["WorkSchedule.Infrastructure/WorkSchedule.Infrastructure.csproj", "WorkSchedule.Infrastructure/"]
COPY ["WorkSchedule.Application/WorkSchedule.Application.csproj", "WorkSchedule.Application/"]
COPY ["WorkSchedule.Domain/WorkSchedule.Domain.csproj", "WorkSchedule.Domain/"]
RUN dotnet restore "./WorkSchedule.Api/WorkSchedule.Api.csproj"
COPY . .
WORKDIR "/src/WorkSchedule.Api"
RUN dotnet build "./WorkSchedule.Api.csproj" -c $BUILD_CONFIGURATION -o /app/build

# This stage is used to publish the service project to be copied to the final stage
FROM build AS publish
ARG BUILD_CONFIGURATION=Development
RUN dotnet publish "./WorkSchedule.Api.csproj" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false

RUN dotnet tool install --global dotnet-ef
ENV PATH="$PATH:/root/.dotnet/tools"
WORKDIR /src
ENTRYPOINT /root/.dotnet/tools/dotnet-ef migrations add UpdateMigration --startup-project WorkSchedule.Api --project WorkSchedule.Infrastructure && /root/.dotnet/tools/dotnet-ef database update --startup-project WorkSchedule.Api --project WorkSchedule.Infrastructure